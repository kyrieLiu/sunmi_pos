package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ys.app.petproject.model.LoginInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_INFO".
*/
public class LoginInfoDao extends AbstractDao<LoginInfo, Long> {

    public static final String TABLENAME = "LOGIN_INFO";

    /**
     * Properties of entity LoginInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Selected = new Property(0, String.class, "selected", false, "SELECTED");
        public final static Property HeadOfficeId = new Property(1, int.class, "headOfficeId", false, "HEAD_OFFICE_ID");
        public final static Property BranchId = new Property(2, int.class, "branchId", false, "BRANCH_ID");
        public final static Property ShopName = new Property(3, String.class, "shopName", false, "SHOP_NAME");
        public final static Property ShopShortName = new Property(4, String.class, "shopShortName", false, "SHOP_SHORT_NAME");
        public final static Property EquipmentId = new Property(5, String.class, "equipmentId", false, "EQUIPMENT_ID");
        public final static Property PasswordBoss = new Property(6, String.class, "passwordBoss", false, "PASSWORD_BOSS");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property ShopCode = new Property(8, String.class, "shopCode", false, "SHOP_CODE");
        public final static Property ImgUrl = new Property(9, String.class, "imgUrl", false, "IMG_URL");
        public final static Property MchNo = new Property(10, String.class, "mchNo", false, "MCH_NO");
        public final static Property Md5Key = new Property(11, String.class, "md5Key", false, "MD5_KEY");
        public final static Property StoreId = new Property(12, String.class, "storeId", false, "STORE_ID");
        public final static Property EquipmentShopList = new Property(13, String.class, "equipmentShopList", false, "EQUIPMENT_SHOP_LIST");
        public final static Property IndexId = new Property(14, String.class, "indexId", false, "INDEX_ID");
        public final static Property IsModular = new Property(15, int.class, "isModular", false, "IS_MODULAR");
        public final static Property Password = new Property(16, String.class, "password", false, "PASSWORD");
        public final static Property Address = new Property(17, String.class, "address", false, "ADDRESS");
        public final static Property State = new Property(18, int.class, "state", false, "STATE");
        public final static Property Id = new Property(19, long.class, "id", true, "_id");
    }


    public LoginInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LoginInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_INFO\" (" + //
                "\"SELECTED\" TEXT," + // 0: selected
                "\"HEAD_OFFICE_ID\" INTEGER NOT NULL ," + // 1: headOfficeId
                "\"BRANCH_ID\" INTEGER NOT NULL ," + // 2: branchId
                "\"SHOP_NAME\" TEXT," + // 3: shopName
                "\"SHOP_SHORT_NAME\" TEXT," + // 4: shopShortName
                "\"EQUIPMENT_ID\" TEXT," + // 5: equipmentId
                "\"PASSWORD_BOSS\" TEXT," + // 6: passwordBoss
                "\"PHONE\" TEXT," + // 7: phone
                "\"SHOP_CODE\" TEXT," + // 8: shopCode
                "\"IMG_URL\" TEXT," + // 9: imgUrl
                "\"MCH_NO\" TEXT," + // 10: mchNo
                "\"MD5_KEY\" TEXT," + // 11: md5Key
                "\"STORE_ID\" TEXT," + // 12: storeId
                "\"EQUIPMENT_SHOP_LIST\" TEXT," + // 13: equipmentShopList
                "\"INDEX_ID\" TEXT," + // 14: indexId
                "\"IS_MODULAR\" INTEGER NOT NULL ," + // 15: isModular
                "\"PASSWORD\" TEXT," + // 16: password
                "\"ADDRESS\" TEXT," + // 17: address
                "\"STATE\" INTEGER NOT NULL ," + // 18: state
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL );"); // 19: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginInfo entity) {
        stmt.clearBindings();
 
        String selected = entity.getSelected();
        if (selected != null) {
            stmt.bindString(1, selected);
        }
        stmt.bindLong(2, entity.getHeadOfficeId());
        stmt.bindLong(3, entity.getBranchId());
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(4, shopName);
        }
 
        String shopShortName = entity.getShopShortName();
        if (shopShortName != null) {
            stmt.bindString(5, shopShortName);
        }
 
        String equipmentId = entity.getEquipmentId();
        if (equipmentId != null) {
            stmt.bindString(6, equipmentId);
        }
 
        String passwordBoss = entity.getPasswordBoss();
        if (passwordBoss != null) {
            stmt.bindString(7, passwordBoss);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String shopCode = entity.getShopCode();
        if (shopCode != null) {
            stmt.bindString(9, shopCode);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(10, imgUrl);
        }
 
        String mchNo = entity.getMchNo();
        if (mchNo != null) {
            stmt.bindString(11, mchNo);
        }
 
        String md5Key = entity.getMd5Key();
        if (md5Key != null) {
            stmt.bindString(12, md5Key);
        }
 
        String storeId = entity.getStoreId();
        if (storeId != null) {
            stmt.bindString(13, storeId);
        }
 
        String equipmentShopList = entity.getEquipmentShopList();
        if (equipmentShopList != null) {
            stmt.bindString(14, equipmentShopList);
        }
 
        String indexId = entity.getIndexId();
        if (indexId != null) {
            stmt.bindString(15, indexId);
        }
        stmt.bindLong(16, entity.getIsModular());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(17, password);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(18, address);
        }
        stmt.bindLong(19, entity.getState());
        stmt.bindLong(20, entity.getId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginInfo entity) {
        stmt.clearBindings();
 
        String selected = entity.getSelected();
        if (selected != null) {
            stmt.bindString(1, selected);
        }
        stmt.bindLong(2, entity.getHeadOfficeId());
        stmt.bindLong(3, entity.getBranchId());
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(4, shopName);
        }
 
        String shopShortName = entity.getShopShortName();
        if (shopShortName != null) {
            stmt.bindString(5, shopShortName);
        }
 
        String equipmentId = entity.getEquipmentId();
        if (equipmentId != null) {
            stmt.bindString(6, equipmentId);
        }
 
        String passwordBoss = entity.getPasswordBoss();
        if (passwordBoss != null) {
            stmt.bindString(7, passwordBoss);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String shopCode = entity.getShopCode();
        if (shopCode != null) {
            stmt.bindString(9, shopCode);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(10, imgUrl);
        }
 
        String mchNo = entity.getMchNo();
        if (mchNo != null) {
            stmt.bindString(11, mchNo);
        }
 
        String md5Key = entity.getMd5Key();
        if (md5Key != null) {
            stmt.bindString(12, md5Key);
        }
 
        String storeId = entity.getStoreId();
        if (storeId != null) {
            stmt.bindString(13, storeId);
        }
 
        String equipmentShopList = entity.getEquipmentShopList();
        if (equipmentShopList != null) {
            stmt.bindString(14, equipmentShopList);
        }
 
        String indexId = entity.getIndexId();
        if (indexId != null) {
            stmt.bindString(15, indexId);
        }
        stmt.bindLong(16, entity.getIsModular());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(17, password);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(18, address);
        }
        stmt.bindLong(19, entity.getState());
        stmt.bindLong(20, entity.getId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 19);
    }    

    @Override
    public LoginInfo readEntity(Cursor cursor, int offset) {
        LoginInfo entity = new LoginInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // selected
            cursor.getInt(offset + 1), // headOfficeId
            cursor.getInt(offset + 2), // branchId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shopName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shopShortName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // equipmentId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // passwordBoss
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // shopCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // imgUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mchNo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // md5Key
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // storeId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // equipmentShopList
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // indexId
            cursor.getInt(offset + 15), // isModular
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // password
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // address
            cursor.getInt(offset + 18), // state
            cursor.getLong(offset + 19) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginInfo entity, int offset) {
        entity.setSelected(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setHeadOfficeId(cursor.getInt(offset + 1));
        entity.setBranchId(cursor.getInt(offset + 2));
        entity.setShopName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShopShortName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEquipmentId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPasswordBoss(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShopCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setImgUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMchNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMd5Key(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStoreId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEquipmentShopList(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIndexId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsModular(cursor.getInt(offset + 15));
        entity.setPassword(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAddress(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setState(cursor.getInt(offset + 18));
        entity.setId(cursor.getLong(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
