package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ys.app.petproject.model.CommitOrderTempInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMIT_ORDER_TEMP_INFO".
*/
public class CommitOrderTempInfoDao extends AbstractDao<CommitOrderTempInfo, Long> {

    public static final String TABLENAME = "COMMIT_ORDER_TEMP_INFO";

    /**
     * Properties of entity CommitOrderTempInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbId = new Property(0, Long.class, "dbId", true, "_id");
        public final static Property Id = new Property(1, long.class, "id", false, "ID");
        public final static Property Type = new Property(2, long.class, "type", false, "TYPE");
        public final static Property TypeName = new Property(3, String.class, "typeName", false, "TYPE_NAME");
        public final static Property RealAmt = new Property(4, double.class, "realAmt", false, "REAL_AMT");
        public final static Property Price = new Property(5, double.class, "price", false, "PRICE");
        public final static Property VipPrice = new Property(6, double.class, "vipPrice", false, "VIP_PRICE");
        public final static Property Num = new Property(7, int.class, "num", false, "NUM");
        public final static Property UserId = new Property(8, long.class, "userId", false, "USER_ID");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
        public final static Property Icon = new Property(10, String.class, "icon", false, "ICON");
        public final static Property UserName = new Property(11, String.class, "userName", false, "USER_NAME");
        public final static Property IsPromotion = new Property(12, int.class, "isPromotion", false, "IS_PROMOTION");
        public final static Property PromotionAmt = new Property(13, double.class, "promotionAmt", false, "PROMOTION_AMT");
        public final static Property IsGift = new Property(14, int.class, "isGift", false, "IS_GIFT");
        public final static Property Unit = new Property(15, String.class, "unit", false, "UNIT");
        public final static Property OrderType = new Property(16, int.class, "orderType", false, "ORDER_TYPE");
        public final static Property CardID = new Property(17, int.class, "cardID", false, "CARD_ID");
        public final static Property VipUserId = new Property(18, int.class, "vipUserId", false, "VIP_USER_ID");
    }


    public CommitOrderTempInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CommitOrderTempInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMIT_ORDER_TEMP_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: dbId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"TYPE_NAME\" TEXT," + // 3: typeName
                "\"REAL_AMT\" REAL NOT NULL ," + // 4: realAmt
                "\"PRICE\" REAL NOT NULL ," + // 5: price
                "\"VIP_PRICE\" REAL NOT NULL ," + // 6: vipPrice
                "\"NUM\" INTEGER NOT NULL ," + // 7: num
                "\"USER_ID\" INTEGER NOT NULL ," + // 8: userId
                "\"NAME\" TEXT," + // 9: name
                "\"ICON\" TEXT," + // 10: icon
                "\"USER_NAME\" TEXT," + // 11: userName
                "\"IS_PROMOTION\" INTEGER NOT NULL ," + // 12: isPromotion
                "\"PROMOTION_AMT\" REAL NOT NULL ," + // 13: promotionAmt
                "\"IS_GIFT\" INTEGER NOT NULL ," + // 14: isGift
                "\"UNIT\" TEXT," + // 15: unit
                "\"ORDER_TYPE\" INTEGER NOT NULL ," + // 16: orderType
                "\"CARD_ID\" INTEGER NOT NULL ," + // 17: cardID
                "\"VIP_USER_ID\" INTEGER NOT NULL );"); // 18: vipUserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMIT_ORDER_TEMP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommitOrderTempInfo entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getType());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(4, typeName);
        }
        stmt.bindDouble(5, entity.getRealAmt());
        stmt.bindDouble(6, entity.getPrice());
        stmt.bindDouble(7, entity.getVipPrice());
        stmt.bindLong(8, entity.getNum());
        stmt.bindLong(9, entity.getUserId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(11, icon);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(12, userName);
        }
        stmt.bindLong(13, entity.getIsPromotion());
        stmt.bindDouble(14, entity.getPromotionAmt());
        stmt.bindLong(15, entity.getIsGift());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(16, unit);
        }
        stmt.bindLong(17, entity.getOrderType());
        stmt.bindLong(18, entity.getCardID());
        stmt.bindLong(19, entity.getVipUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommitOrderTempInfo entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getType());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(4, typeName);
        }
        stmt.bindDouble(5, entity.getRealAmt());
        stmt.bindDouble(6, entity.getPrice());
        stmt.bindDouble(7, entity.getVipPrice());
        stmt.bindLong(8, entity.getNum());
        stmt.bindLong(9, entity.getUserId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(11, icon);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(12, userName);
        }
        stmt.bindLong(13, entity.getIsPromotion());
        stmt.bindDouble(14, entity.getPromotionAmt());
        stmt.bindLong(15, entity.getIsGift());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(16, unit);
        }
        stmt.bindLong(17, entity.getOrderType());
        stmt.bindLong(18, entity.getCardID());
        stmt.bindLong(19, entity.getVipUserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CommitOrderTempInfo readEntity(Cursor cursor, int offset) {
        CommitOrderTempInfo entity = new CommitOrderTempInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbId
            cursor.getLong(offset + 1), // id
            cursor.getLong(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // typeName
            cursor.getDouble(offset + 4), // realAmt
            cursor.getDouble(offset + 5), // price
            cursor.getDouble(offset + 6), // vipPrice
            cursor.getInt(offset + 7), // num
            cursor.getLong(offset + 8), // userId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // icon
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userName
            cursor.getInt(offset + 12), // isPromotion
            cursor.getDouble(offset + 13), // promotionAmt
            cursor.getInt(offset + 14), // isGift
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // unit
            cursor.getInt(offset + 16), // orderType
            cursor.getInt(offset + 17), // cardID
            cursor.getInt(offset + 18) // vipUserId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommitOrderTempInfo entity, int offset) {
        entity.setDbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getLong(offset + 1));
        entity.setType(cursor.getLong(offset + 2));
        entity.setTypeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRealAmt(cursor.getDouble(offset + 4));
        entity.setPrice(cursor.getDouble(offset + 5));
        entity.setVipPrice(cursor.getDouble(offset + 6));
        entity.setNum(cursor.getInt(offset + 7));
        entity.setUserId(cursor.getLong(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIcon(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsPromotion(cursor.getInt(offset + 12));
        entity.setPromotionAmt(cursor.getDouble(offset + 13));
        entity.setIsGift(cursor.getInt(offset + 14));
        entity.setUnit(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setOrderType(cursor.getInt(offset + 16));
        entity.setCardID(cursor.getInt(offset + 17));
        entity.setVipUserId(cursor.getInt(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommitOrderTempInfo entity, long rowId) {
        entity.setDbId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommitOrderTempInfo entity) {
        if(entity != null) {
            return entity.getDbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommitOrderTempInfo entity) {
        return entity.getDbId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
